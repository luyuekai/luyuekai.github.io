<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on 听风流水的博客</title>
    <link>https://luyuekai.github.io/tags/notes/index.xml</link>
    <description>Recent content in Notes on 听风流水的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://luyuekai.github.io/tags/notes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>effective java 读书笔记（二）</title>
      <link>https://luyuekai.github.io/2017/04/effective-java-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luyuekai.github.io/2017/04/effective-java-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
      <description>&lt;p&gt;&lt;strong&gt;你是人间的四月天&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;第三章-对于所有对象都通用的方法&#34;&gt;第三章  对于所有对象都通用的方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;八.  覆盖equals时请遵守通用约定&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;equals方法实现的等价关系: &lt;strong&gt;自反性,对称性,传递性,一致性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;九．覆盖equals时总要覆盖hashCode&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;相等的对象必须具有相等的散列码(hashcode)&lt;/li&gt;
&lt;li&gt;不等的对象散列码可能相等,但最佳实践是&amp;rdquo;为不相等的对象产生不相等的散列码&amp;rdquo;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;十. 始终要覆盖toString方法&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;十一. 谨慎地覆盖clone&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;十二. 考虑实现Comparable接口&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;如果在编写一个值类,具有非常明显的内在排序关系,如按照字母排序,按数值排序,按年代排序,那应该坚决考虑实现Comparable接口&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public interface Comparable&amp;lt;T&amp;gt;{
  int compareTo(T t)
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;第四章-类和接口&#34;&gt;第四章 类和接口&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;十三. 使类和成员的可访问性最小化&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;尽可能地使每个类或者成员不对外接访问&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;类具有公有的静态final数组域,或者返回这种域的访问方法,这几乎总是错误的.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;十四. 在公有类中使用访问方法而非公有域&lt;br /&gt;
&lt;code&gt;java
class Point {
public double x;
public double y;
}
&lt;/code&gt;&lt;br /&gt;
正确做法应该设置为private方法,提供setter和getter方法.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;十五. 使可变性最小化&lt;br /&gt;
为了使类成为不可变,应遵循以下五条规则&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;1. 不要提供任何会修改对象状态的方法&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;2. 保证类不会被扩展.一般做法是使这个类成为final&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;3. 使所有的域都是final的&lt;/li&gt;
&lt;li&gt;4. 使所有的域都变成私有的&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;5.确保对于任何可变组件的互斥访问&lt;/li&gt;
&lt;li&gt;不可变对象本质上是线程安全的，它们不要求同步&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;十六. 复合优先于继承&lt;/li&gt;
&lt;li&gt;十七.  要么为继承而设计，并提供文档说明，要么就禁止继承&lt;br /&gt;
有两种方法可以禁止子类化：&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;较容易的：把该类声明为final&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;把所有的构造器都变成私有的，或者包级私有的，并增加一些公有的静态工厂来替代构造器&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;十八. 接口优于抽象类&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;十九. 接口只用于定义类型&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;二十.  类层次优于标签类&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;标签类过于冗长，容易出错，并且效率低下。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;二一. 用函数对象表示策略&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;具体的策略类往往使用匿名类声明，下面的语句根据长度对一个字符串数组进行排序：&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Arrays.sort(stringArray,new Comparator&amp;lt;String&amp;gt;(){
public int compare(String s1,String s2){
   return  s1.length() - s2.length();
}  
}
)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;注意，采用上述方式使用匿名类时，将会在每次执行调用的时候创建一个新的实例。如果它被重复执行，考虑将函数对象存储到一个私有的静态final域里，并重用它。这样做的另一种好处是，可以为这个函数对象取一个有意义的域名城。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;二二. 优先考虑静态成员类&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;嵌套类是指被定义在另一个类的内部的类。嵌套类存在的目的应该只是为它的外围类提供服务。嵌套类有四种：&lt;strong&gt;静态成员类&lt;/strong&gt;、&lt;strong&gt;非静态成员类&lt;/strong&gt;、&lt;strong&gt;匿名类&lt;/strong&gt;、&lt;strong&gt;局部类&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>effective java 读书笔记（一）</title>
      <link>https://luyuekai.github.io/2017/04/effective-java-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luyuekai.github.io/2017/04/effective-java-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>&lt;p&gt;&lt;strong&gt;你是人间的四月天&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
读书时有输入亦应该有输出,此篇记录阅读&lt;strong&gt;effective java&lt;/strong&gt;的重点及心得体会.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;第二章-创建和销毁对象&#34;&gt;第二章  创建和销毁对象&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;一 . 考虑用静态工厂方法代替构造器&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;类可以提供一个公有的静态工厂方法,它只是返回类的实例的静态方法.&lt;/p&gt;

&lt;p&gt;如下所示:来自Boolean(基本类型boolean的包装类)的简单示例.这个方法将boolean基本类型值转换成了一个Boolean对象引用:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public static Boolean valueOf(boolean b){

return b ? Boolean.TRUE : Boolean.FALSE;

}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;- 优势

- 1. 静态工厂方法与构造器不同的第一大优势在与: 它们有名称.  

- 2. 第二大优势: 不必在每次调用它们的时候都创建一个新对象.

- 3. 第三大优势: 它们可以返回原返回类型的任何子类型的对象.

- 4. 第四大优势: 在创建参数化类型实例时,它们使代码变得更加简洁.  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二. 遇到多个构造器参数时要考虑用构建器&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在遇到许多构造器参数的时候,有第二种代替方法,即JavaBeans模式. 在这种模式下,调用一个无参构造器来创建对象,然后调用setter方法来设置每个必要的参数,以及每个相关的可选参数.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;缺点: 在构造过程中JavaBean可能处于不一致的状态.类无法仅仅通过检验构造器参数的有效性来保证一致性.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;三. 用私有构造器或者枚举类型强化Singleton属性&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;四. 通过私有构造器强化不可实例化的能力.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;五. 避免创建不必要的对象&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个极端的反面例子&lt;code&gt;String s = new String(&amp;quot;stringette&amp;quot;);&lt;/code&gt;该语句每次执行都会创建一个String实例,但是都是不必要的.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;改进版本: &lt;code&gt;String s = &amp;quot;stringette&amp;quot;&lt;/code&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;六. 消除过期的对象引用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;七. 避免使用终结方法.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;终结方法的优先级要明显低于其他线程.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不应该依赖终结方法来更新重要的持久状态.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;显式的终止方法通常与 try-finally 结构结合起来使用,以确保及时终止.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>