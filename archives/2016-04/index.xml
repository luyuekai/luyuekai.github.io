<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2016 04 on 听风流水的博客</title>
    <link>https://luyuekai.github.io/archives/2016-04/index.xml</link>
    <description>Recent content in 2016 04 on 听风流水的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://luyuekai.github.io/archives/2016-04/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>effective java 读书笔记（一）</title>
      <link>https://luyuekai.github.io/2017/04/effective-java-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://luyuekai.github.io/2017/04/effective-java-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>&lt;p&gt;&lt;strong&gt;你是人间的四月天&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
读书时有输入亦应该有输出,此篇记录阅读&lt;strong&gt;effective java&lt;/strong&gt;的重点及心得体会.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;第二章-创建和销毁对象&#34;&gt;第二章  创建和销毁对象&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;一 . 考虑用静态工厂方法代替构造器&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;类可以提供一个公有的静态工厂方法,它只是返回类的实例的静态方法.&lt;/p&gt;

&lt;p&gt;如下所示:来自Boolean(基本类型boolean的包装类)的简单示例.这个方法将boolean基本类型值转换成了一个Boolean对象引用:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public static Boolean valueOf(boolean b){

return b ? Boolean.TRUE : Boolean.FALSE;

}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;- 优势

- 1. 静态工厂方法与构造器不同的第一大优势在与: 它们有名称.  

- 2. 第二大优势: 不必在每次调用它们的时候都创建一个新对象.

- 3. 第三大优势: 它们可以返回原返回类型的任何子类型的对象.

- 4. 第四大优势: 在创建参数化类型实例时,它们使代码变得更加简洁.  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二. 遇到多个构造器参数时要考虑用构建器&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在遇到许多构造器参数的时候,有第二种代替方法,即JavaBeans模式. 在这种模式下,调用一个无参构造器来创建对象,然后调用setter方法来设置每个必要的参数,以及每个相关的可选参数.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;缺点: 在构造过程中JavaBean可能处于不一致的状态.类无法仅仅通过检验构造器参数的有效性来保证一致性.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;三. 用私有构造器或者枚举类型强化Singleton属性&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;四. 通过私有构造器强化不可实例化的能力.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;五. 避免创建不必要的对象&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个极端的反面例子&lt;code&gt;String s = new String(&amp;quot;stringette&amp;quot;);&lt;/code&gt;该语句每次执行都会创建一个String实例,但是都是不必要的.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;改进版本: &lt;code&gt;String s = &amp;quot;stringette&amp;quot;&lt;/code&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;六. 消除过期的对象引用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;七. 避免使用终结方法.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;终结方法的优先级要明显低于其他线程.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不应该依赖终结方法来更新重要的持久状态.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;显式的终止方法通常与 try-finally 结构结合起来使用,以确保及时终止.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>git中各字母详解</title>
      <link>https://luyuekai.github.io/2016/04/git%E4%B8%AD%E5%90%84%E5%AD%97%E6%AF%8D%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luyuekai.github.io/2016/04/git%E4%B8%AD%E5%90%84%E5%AD%97%E6%AF%8D%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;&lt;strong&gt;四月是你的谎言&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;在使用netbeans的git操作过程中,在PUSH阶段,经常会看到各种branch下存储着一些参数.&lt;/p&gt;

&lt;p&gt;如 A,C,D&amp;hellip;.. 遂上网查找了一下这些字母的具体含义,解释如下:&lt;/p&gt;

&lt;p&gt;原文链接:&lt;a href=&#34;http://blog.csdn.net/adminyan/article/details/64922979&#34;&gt;http://blog.csdn.net/adminyan/article/details/64922979&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A(add): 本地新增文件(服务器上没有)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C(copy): 文件的一个新的拷贝&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;D(delete): 本地删除的文件(服务器上还在)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;M(modify): 文件的内容或者mode被修改了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;R(rename):文件名被修改了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;T(): 文件类型被修改了&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;U(): 文件没有被合并(你需要完成合并才能进行提交)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;X: 未知状态(极有可能遇到Git的bug,可以向git提交bug report)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;</description>
    </item>
    
    <item>
      <title>位向量表示有限集合</title>
      <link>https://luyuekai.github.io/2016/04/%E4%BD%8D%E5%90%91%E9%87%8F%E8%A1%A8%E7%A4%BA%E6%9C%89%E9%99%90%E9%9B%86%E5%90%88/</link>
      <pubDate>Fri, 01 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://luyuekai.github.io/2016/04/%E4%BD%8D%E5%90%91%E9%87%8F%E8%A1%A8%E7%A4%BA%E6%9C%89%E9%99%90%E9%9B%86%E5%90%88/</guid>
      <description>&lt;p&gt;&lt;strong&gt;四月是你的谎言&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;第二章-p33页&#34;&gt;第二章 P33页&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;由于无法显示公式,因此贴上本笔记的为知外连.供以后细看&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://3d1ff97e.wiz03.com/share/s/0Z7_B-0I14bu2BfsjO37ytJL2b-REp3s_QBd2c-O9v0f6UDE&#34;&gt;http://3d1ff97e.wiz03.com/share/s/0Z7_B-0I14bu2BfsjO37ytJL2b-REp3s_QBd2c-O9v0f6UDE&lt;/a&gt;&lt;br /&gt;
在阅读深入理解计算机系统该书时，发现了一个很好的idea， 通过位向量来表示有限集合。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;位向量&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;用位构成的向量，只有0,1组成。如[0,0,1,1,0,1,0]就是一个位向量。&lt;/li&gt;
&lt;li&gt;在用位向量表示集合时，我们规定右边代表最低位。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们用位向量$\left {a&lt;em&gt;{w-1},a&lt;/em&gt;{w-2}&amp;hellip;a&lt;em&gt;{1},a&lt;/em&gt;{0}  \right }$编码任何子集$A\subseteq \left { 0,1,2&amp;hellip;,w-1 \right }$,其中$a&lt;em&gt;{i}=1$当且仅当$i\in A$,例如，（记住我们是将$a&lt;/em&gt;{w-1}$写在左边，而将$a_{0}$写在右边）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;位向量 $a\doteq \left { 01101001 \right }$表示集合A={0,3,5,6}。 解释： 对位向量a,从左至右，1的位置分别出现在第0,3,5,6的位置上，因此位向量a即表示了集合A；&lt;/li&gt;
&lt;li&gt;同理，$b\doteq \left{01010101 \right}$表示集合B={0,2,4,6}。 使用这种编码集合的方法，布尔运算| 和&amp;amp;分别对应于集合的并和交。而~则对应于集合的补。&lt;/li&gt;
&lt;li&gt;继续前面的例子， 运算 a&amp;amp;b得到位向量[01000001],而$A\bigcap B $={0,6}；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;思考：&lt;br /&gt;
&amp;lt; 1. 若是集合里面有相同的元素该怎么表示？&lt;br /&gt;
答： 集合有三大性质： &lt;code&gt;确定性&lt;/code&gt;,&lt;code&gt;无序性&lt;/code&gt;，&lt;code&gt;互异性&lt;/code&gt;.互异性决定了集合中无法有相同的元素。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>